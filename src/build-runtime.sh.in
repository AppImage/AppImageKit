#! /bin/bash

########################
# build runtime script #
########################
#
# template to be configured by the CMake build system

if which clang >/dev/null; then
    CC=clang
else
    CC=gcc
fi

STRIP=strip

set -xe

build_dir=$(mktemp -d)
orig_cwd=$(pwd)
repo_root="@CMAKE_CURRENT_SOURCE_DIR@"

# TODO: check whether those options are needed for other tools' build processes
small_FLAGS="-Os -ffunction-sections -fdata-sections"
small_LDFLAGS="-s -Wl,--gc-sections"

cd $repo_root
git_version="@GIT_VERSION@"

cleanup() {
    [ -d $build_dir ] && rm -r "$build_dir"
}

trap cleanup EXIT

cd "$build_dir"

# Compile runtime but do not link
$CC -DVERSION_NUMBER=\"$git_version\" -I"@xz_INCLUDE_DIR@" -I"@squashfuse_INCLUDE_DIR@" \
    -D_FILE_OFFSET_BITS=64 -g $small_FLAGS -c "$repo_root"/runtime.c

# Prepare 1024 bytes of space for updateinformation
printf '\0%.0s' {0..1023} > 1024_blank_bytes

objcopy --add-section .upd_info=1024_blank_bytes \
        --set-section-flags .upd_info=noload,readonly runtime.o runtime2.o

objcopy --add-section .sha256_sig=1024_blank_bytes \
        --set-section-flags .sha256_sig=noload,readonly runtime2.o runtime3.o

# Now statically link against libsquashfuse_ll, libsquashfuse and liblzma
# and embed .upd_info and .sha256_sig sections
# TODO: squashfuse_LIBRARIES is a semicolon separated list of values that has to be split during runtime of this script
squashfuse_libs="@squashfuse_LIBRARIES@"
$CC $small_FLAGS $small_LDFLAGS -o runtime "$repo_root"/elf.c "$repo_root"/notify.c "$repo_root"/getsection.c \
    runtime3.o ${squashfuse_libs//;/ } -L"@xz_LIBRARIES_DIR@" \
    -Wl,-Bdynamic -lpthread -lz -Wl,-Bstatic -llzma -Wl,-Bdynamic -ldl
$STRIP runtime

# Test if we can read it back
readelf -x .upd_info runtime # hexdump
readelf -p .upd_info runtime || true # string

# The raw updateinformation data can be read out manually like this:
HEXOFFSET=$(objdump -h runtime | grep .upd_info | awk '{print $6}')
HEXLENGTH=$(objdump -h runtime | grep .upd_info | awk '{print $3}')
dd bs=1 if=runtime skip=$(($(echo 0x$HEXOFFSET)+0)) count=$(($(echo 0x$HEXLENGTH)+0)) | xxd

APPIMAGEOFFSET=$(./runtime --appimage-offset)

# Insert AppImage magic bytes
printf '\x41\x49\x02' | dd of=runtime bs=1 seek=8 count=3 conv=notrunc

# Pad runtime to multiple of 512bytes
dd if=/dev/null of=runtime bs=1 count=1 seek=$APPIMAGEOFFSET

# Add boot signature to runtime, this way fdisk recognize the appimage as a partitioned disk image
printf '\x55\xaa' | dd of=runtime bs=1 seek=510 count=2 conv=notrunc

# Add partition entry to runtime, this way gnome-disk-image-mounter can open it.
printf "0x%08x" $(echo $APPIMAGEOFFSET / 512 | bc) | xxd -r | tac -rs. | dd of=runtime bs=1 seek=454 count=4 conv=notrunc

# Convert runtime into a data object that can be embedded into appimagetool
ld -r -b binary -o data.o runtime

# Show header for debugging purposes
xxd runtime | head -n 1

cp runtime data.o "$orig_cwd"
